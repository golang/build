// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: internal/relui/protos/relui.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReleaseService_UpdateSigningStatus_FullMethodName = "/protos.ReleaseService/UpdateSigningStatus"
)

// ReleaseServiceClient is the client API for ReleaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReleaseService enables the signing of release artifacts.
type ReleaseServiceClient interface {
	// UpdateSigningStatus is a bidirectional connection where server is requesting that the client:
	// - Sign a release artifact.
	// - Provide an update on a previous request to sign a release artifact.
	// - Consider a previous request to sign a release artifact as obsolete.
	// The client initiates a connection with the server and waits for the server to issue a request
	// such as:
	// - An update on the status of a signing request (either running or completed).
	// - An acknowledgement that a request to sign a release artifact has been accepted and initiated.
	UpdateSigningStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SigningStatus, SigningRequest], error)
}

type releaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseServiceClient(cc grpc.ClientConnInterface) ReleaseServiceClient {
	return &releaseServiceClient{cc}
}

func (c *releaseServiceClient) UpdateSigningStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SigningStatus, SigningRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReleaseService_ServiceDesc.Streams[0], ReleaseService_UpdateSigningStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SigningStatus, SigningRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReleaseService_UpdateSigningStatusClient = grpc.BidiStreamingClient[SigningStatus, SigningRequest]

// ReleaseServiceServer is the server API for ReleaseService service.
// All implementations must embed UnimplementedReleaseServiceServer
// for forward compatibility.
//
// ReleaseService enables the signing of release artifacts.
type ReleaseServiceServer interface {
	// UpdateSigningStatus is a bidirectional connection where server is requesting that the client:
	// - Sign a release artifact.
	// - Provide an update on a previous request to sign a release artifact.
	// - Consider a previous request to sign a release artifact as obsolete.
	// The client initiates a connection with the server and waits for the server to issue a request
	// such as:
	// - An update on the status of a signing request (either running or completed).
	// - An acknowledgement that a request to sign a release artifact has been accepted and initiated.
	UpdateSigningStatus(grpc.BidiStreamingServer[SigningStatus, SigningRequest]) error
	mustEmbedUnimplementedReleaseServiceServer()
}

// UnimplementedReleaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReleaseServiceServer struct{}

func (UnimplementedReleaseServiceServer) UpdateSigningStatus(grpc.BidiStreamingServer[SigningStatus, SigningRequest]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateSigningStatus not implemented")
}
func (UnimplementedReleaseServiceServer) mustEmbedUnimplementedReleaseServiceServer() {}
func (UnimplementedReleaseServiceServer) testEmbeddedByValue()                        {}

// UnsafeReleaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseServiceServer will
// result in compilation errors.
type UnsafeReleaseServiceServer interface {
	mustEmbedUnimplementedReleaseServiceServer()
}

func RegisterReleaseServiceServer(s grpc.ServiceRegistrar, srv ReleaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedReleaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReleaseService_ServiceDesc, srv)
}

func _ReleaseService_UpdateSigningStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReleaseServiceServer).UpdateSigningStatus(&grpc.GenericServerStream[SigningStatus, SigningRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReleaseService_UpdateSigningStatusServer = grpc.BidiStreamingServer[SigningStatus, SigningRequest]

// ReleaseService_ServiceDesc is the grpc.ServiceDesc for ReleaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ReleaseService",
	HandlerType: (*ReleaseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateSigningStatus",
			Handler:       _ReleaseService_UpdateSigningStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/relui/protos/relui.proto",
}
